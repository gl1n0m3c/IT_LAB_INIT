// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/public/camera_create": {
            "post": {
                "description": "Creates a new camera and returns its ID upon successful creation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Camera Creation",
                "parameters": [
                    {
                        "description": "Camera Creation",
                        "name": "camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CameraBase"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation, returning camera ID",
                        "schema": {
                            "$ref": "#/definitions/responses.CreationStringResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    }
                }
            }
        },
        "/public/camera_delete": {
            "delete": {
                "description": "Deletes an existing camera by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Camera Deletion",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful deletion"
                    },
                    "400": {
                        "description": "Invalid input or Camera ID not found",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    }
                }
            }
        },
        "/public/case_create": {
            "post": {
                "description": "Creates a new case with a photo (.jpeg / .jpg / .png / .svg) and case data in byte string.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Case Creation",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Photo of the case",
                        "name": "photo",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Case data in byte string format",
                        "name": "byte_string",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation, returning case ID",
                        "schema": {
                            "$ref": "#/definitions/responses.CreationIntResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    }
                }
            }
        },
        "/public/refresh": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Refreshes access and refresh tokens using a refresh token provided in the Authorization header.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Refresh Tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh Token",
                        "name": "Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful token refresh, returning new jwt and refresh token",
                        "schema": {
                            "$ref": "#/definitions/responses.JWTRefresh"
                        }
                    },
                    "400": {
                        "description": "No refresh token provided",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    }
                }
            }
        },
        "/public/specialist_login": {
            "post": {
                "description": "Logs in a specialist and returns a jwt and refresh token upon successful login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Specialist Login",
                "parameters": [
                    {
                        "description": "Specialist Login",
                        "name": "specialist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SpecialistLogin"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful login, returning jwt and refresh token",
                        "schema": {
                            "$ref": "#/definitions/responses.JWTRefresh"
                        }
                    },
                    "400": {
                        "description": "Invalid input or incorrect password / login",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    }
                }
            }
        },
        "/public/specialist_register": {
            "post": {
                "description": "Registers a new specialist, uploads their photo, and returns a jwt and refresh token upon successful registration.\nAutomatically level=1, is_verified=false.\nLogin and password are required, along with a photo upload.\nThere are some validation on password: More than 8 symbols, contain at least one number, one uppercase and one lowercase letter.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Specialist Registration with Photo Upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Login",
                        "name": "login",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Full Name",
                        "name": "fullname",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Photo Upload",
                        "name": "photo",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful registration, returning jwt and refresh token",
                        "schema": {
                            "$ref": "#/definitions/responses.JWTRefresh"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.MessageResponse"
                        }
                    }
                }
            }
        },
        "/specialist/create_rated": {
            "post": {
                "description": "Creates a new rating entry based on the provided data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "specialists"
                ],
                "parameters": [
                    {
                        "description": "Rated data",
                        "name": "rated_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RatedCreate"
                        }
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the rating",
                        "schema": {
                            "$ref": "#/definitions/responses.CreationIntResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "JWT is invalid or expired",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/specialist/get_rated_solved": {
            "get": {
                "description": "Retrieves a rated solved entry based on the provided cursor ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "specialists"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cursor ID for pagination",
                        "name": "cursor_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the rated solved",
                        "schema": {
                            "$ref": "#/definitions/models.RatedCursor"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "JWT is invalid or expired",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/specialist/update_rated_status": {
            "put": {
                "description": "Updates the status of a rated entry based on the provided Rated ID and sets it to the new status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "specialists"
                ],
                "parameters": [
                    {
                        "description": "Rated update information",
                        "name": "rated_update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RatedUpdate"
                        }
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the rated status"
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "JWT is invalid or expired",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CameraBase": {
            "type": "object",
            "required": [
                "coordinates",
                "description",
                "type"
            ],
            "properties": {
                "coordinates": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.Rated": {
            "type": "object",
            "required": [
                "case_id",
                "choice"
            ],
            "properties": {
                "case_id": {
                    "type": "integer"
                },
                "choice": {
                    "type": "boolean"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "specialist_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.RatedCreate": {
            "type": "object",
            "required": [
                "case_id",
                "choice"
            ],
            "properties": {
                "case_id": {
                    "type": "integer"
                },
                "choice": {
                    "type": "boolean"
                }
            }
        },
        "models.RatedCursor": {
            "type": "object",
            "properties": {
                "cursor": {
                    "$ref": "#/definitions/null.Int"
                },
                "rated": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Rated"
                    }
                }
            }
        },
        "models.RatedUpdate": {
            "type": "object",
            "required": [
                "case_id",
                "status"
            ],
            "properties": {
                "case_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.SpecialistLogin": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "null.Int": {
            "type": "object",
            "properties": {
                "int64": {
                    "type": "integer"
                },
                "valid": {
                    "description": "Valid is true if Int64 is not NULL",
                    "type": "boolean"
                }
            }
        },
        "responses.CreationIntResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "responses.CreationStringResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "responses.JWTRefresh": {
            "type": "object",
            "properties": {
                "JWT": {
                    "type": "string"
                },
                "RefreshToken": {
                    "type": "string"
                }
            }
        },
        "responses.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
