definitions:
  models.CameraBase:
    properties:
      coordinates:
        items:
          type: number
        type: array
      description:
        type: string
      type:
        type: string
    required:
    - coordinates
    - description
    - type
    type: object
  models.CaseCursor:
    properties:
      cases:
        items:
          $ref: '#/definitions/models.CaseViolations'
        type: array
      cursor:
        $ref: '#/definitions/null.Int'
    type: object
  models.CaseFul:
    properties:
      amount:
        type: integer
      camera_id:
        type: string
      current_level:
        type: integer
      datetime:
        type: string
      is_solved:
        type: boolean
      level:
        type: integer
      photo_url:
        type: string
      rated_covers:
        items:
          $ref: '#/definitions/models.RatedCover'
        type: array
      transport:
        type: string
      type:
        type: string
      violation_id:
        type: string
      violation_value:
        type: string
    type: object
  models.CaseViolations:
    properties:
      amount:
        type: integer
      camera_id:
        type: string
      current_level:
        type: integer
      datetime:
        type: string
      id:
        type: integer
      level:
        type: integer
      photo_url:
        type: string
      transport:
        type: string
      type:
        type: string
      violation_id:
        type: string
      violation_value:
        type: string
    type: object
  models.ManagerBase:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  models.Rated:
    properties:
      amount:
        type: integer
      camera_id:
        type: string
      case_id:
        type: integer
      choice:
        type: boolean
      date:
        type: string
      id:
        type: integer
      level:
        type: integer
      photo_url:
        type: string
      specialist_id:
        type: integer
      status:
        type: string
      type:
        type: string
      violation_value:
        type: string
    required:
    - case_id
    type: object
  models.RatedCover:
    properties:
      date:
        type: string
      fullname:
        $ref: '#/definitions/null.String'
      id:
        type: integer
      level:
        type: integer
      photo_url:
        $ref: '#/definitions/null.String'
      row:
        type: integer
      status:
        type: string
    type: object
  models.RatedCreate:
    properties:
      case_id:
        type: integer
      choice:
        type: boolean
    required:
    - case_id
    type: object
  models.RatedCursor:
    properties:
      cursor:
        $ref: '#/definitions/null.Int'
      rated:
        items:
          $ref: '#/definitions/models.Rated'
        type: array
    type: object
  models.RatingSpecialistCount:
    properties:
      correct:
        type: integer
      fullname:
        $ref: '#/definitions/null.String'
      id:
        type: integer
      level:
        type: integer
      photo_url:
        $ref: '#/definitions/null.String'
      row:
        type: integer
      total:
        type: integer
      unknown:
        type: integer
    type: object
  models.RatingSpecialistCountCursor:
    properties:
      cursor:
        $ref: '#/definitions/null.Int'
      specialists:
        items:
          $ref: '#/definitions/models.RatingSpecialistCount'
        type: array
    type: object
  models.RatingSpecialistFul:
    properties:
      fullname:
        type: string
      level:
        type: integer
      rating:
        $ref: '#/definitions/null.Float'
      specialistID:
        type: integer
    type: object
  models.Specialist:
    properties:
      fullname:
        $ref: '#/definitions/null.String'
      id:
        type: integer
      isVerified:
        type: boolean
      level:
        type: integer
      login:
        type: string
      password:
        type: string
      photoUrl:
        $ref: '#/definitions/null.String'
      row:
        type: integer
    required:
    - login
    - password
    type: object
  models.SpecialistLogin:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  null.Float:
    properties:
      float64:
        type: number
      valid:
        description: Valid is true if Float64 is not NULL
        type: boolean
    type: object
  null.Int:
    properties:
      int64:
        type: integer
      valid:
        description: Valid is true if Int64 is not NULL
        type: boolean
    type: object
  null.String:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  responses.CreationIntResponse:
    properties:
      id:
        type: integer
    type: object
  responses.CreationStringResponse:
    properties:
      id:
        type: string
    type: object
  responses.JWTRefresh:
    properties:
      JWT:
        type: string
      RefreshToken:
        type: string
    type: object
  responses.MessageResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /manager/get_case:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves a case by its ID and returns detailed information about the case.
        Field `rated_covers` could be null if there are no ratings
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the case to retrieve
        in: query
        name: case_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the case details
          schema:
            $ref: '#/definitions/models.CaseFul'
        "400":
          description: Invalid query parameter or missing case_id
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "403":
          description: JWT is invalid or expired
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      tags:
      - managers
  /manager/get_specialists_rating:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves a list of specialists ratings within a specified time range, paginated by a cursor.
        Time example (2023-04-12T15:04:05Z - without time zone / 2023-04-12T15:04:05+07:00 - with time zone)
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: authorization
        required: true
        type: string
      - description: Cursor for pagination
        in: query
        name: cursor
        type: integer
      - description: Start time for filtering ratings (inclusive), in RFC3339 format
        in: query
        name: time_from
        required: true
        type: string
      - description: End time for filtering ratings (inclusive), in RFC3339 format
        in: query
        name: time_to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the specialists' ratings
          schema:
            $ref: '#/definitions/models.RatingSpecialistCountCursor'
        "400":
          description: Invalid query parameter or missing required fields
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "403":
          description: JWT is invalid or expired
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      tags:
      - managers
  /public/camera_create:
    post:
      consumes:
      - application/json
      description: Creates a new camera and returns its ID upon successful creation.
      parameters:
      - description: Camera Creation
        in: body
        name: camera
        required: true
        schema:
          $ref: '#/definitions/models.CameraBase'
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation, returning camera ID
          schema:
            $ref: '#/definitions/responses.CreationStringResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Camera Creation
      tags:
      - public
  /public/camera_delete:
    delete:
      consumes:
      - application/json
      description: Deletes an existing camera by its ID.
      parameters:
      - description: Camera ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Successful deletion
        "400":
          description: Invalid input or Camera ID not found
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Camera Deletion
      tags:
      - public
  /public/case_create:
    post:
      consumes:
      - multipart/form-data
      description: Creates a new case with a photo (.jpeg / .jpg / .png / .svg) and
        case data in byte string.
      parameters:
      - description: Photo of the case
        in: formData
        name: photo
        required: true
        type: file
      - description: Case data in byte string format
        in: formData
        name: byte_string
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successful creation, returning case ID
          schema:
            $ref: '#/definitions/responses.CreationIntResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Case Creation
      tags:
      - public
  /public/manager_login:
    post:
      consumes:
      - application/json
      description: Logs in a specialist and returns a JWT and refresh token upon successful
        login.
      parameters:
      - description: Manager Login
        in: body
        name: specialist
        required: true
        schema:
          $ref: '#/definitions/models.ManagerBase'
      produces:
      - application/json
      responses:
        "201":
          description: Successful login, returning JWT and refresh token
          schema:
            $ref: '#/definitions/responses.JWTRefresh'
        "400":
          description: Invalid input or incorrect password / login
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Manager Login
      tags:
      - public
  /public/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes access and refresh tokens using a refresh token provided
        in the Authorization header.
      parameters:
      - description: Refresh Token
        in: header
        name: refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful token refresh, returning new jwt and refresh token
          schema:
            $ref: '#/definitions/responses.JWTRefresh'
        "400":
          description: No refresh token provided
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Refresh Tokens
      tags:
      - public
  /public/specialist_login:
    post:
      consumes:
      - application/json
      description: Logs in a specialist and returns a jwt and refresh token upon successful
        login.
      parameters:
      - description: Specialist Login
        in: body
        name: specialist
        required: true
        schema:
          $ref: '#/definitions/models.SpecialistLogin'
      produces:
      - application/json
      responses:
        "201":
          description: Successful login, returning jwt and refresh token
          schema:
            $ref: '#/definitions/responses.JWTRefresh'
        "400":
          description: Invalid input or incorrect password / login
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Specialist Login
      tags:
      - public
  /public/specialist_register:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Registers a new specialist, uploads their photo, and returns a jwt and refresh token upon successful registration.
        Automatically level=1, is_verified=false.
        Login and password are required, along with a photo upload.
        There are some validation on password: More than 8 symbols, contain at least one number, one uppercase and one lowercase letter.
      parameters:
      - description: Login
        in: formData
        name: login
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Full Name
        in: formData
        name: fullname
        type: string
      - description: Photo Upload
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Successful registration, returning jwt and refresh token
          schema:
            $ref: '#/definitions/responses.JWTRefresh'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: Specialist Registration with Photo Upload
      tags:
      - public
  /specialist/create_rated:
    post:
      consumes:
      - application/json
      description: Creates a new rating entry based on the provided data.
      parameters:
      - description: Rated data
        in: body
        name: rated_data
        required: true
        schema:
          $ref: '#/definitions/models.RatedCreate'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the rating
          schema:
            $ref: '#/definitions/responses.CreationIntResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "403":
          description: JWT is invalid or expired
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      tags:
      - specialists
  /specialist/get_cases_by_level:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves cases based on the provided cursor ID and the user's ID. It returns cases that match the level of difficulty or rating specified for the user.
        Returned cursor can be only int or null. It depends on existence of cases.
      parameters:
      - description: Cursor ID for pagination
        in: query
        name: cursor_id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the cases by level
          schema:
            $ref: '#/definitions/models.CaseCursor'
        "400":
          description: Invalid input data or bad query parameter
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is invalid or expired
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "403":
          description: User is unverified
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      tags:
      - specialists
  /specialist/get_rated_solved:
    get:
      consumes:
      - application/json
      description: Retrieves a rated solved entry based on the provided cursor ID.
      parameters:
      - description: Cursor ID for pagination
        in: query
        name: cursor_id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the rated solved
          schema:
            $ref: '#/definitions/models.RatedCursor'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is invalid or expired
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      tags:
      - specialists
  /specialist/get_rating:
    get:
      consumes:
      - application/json
      description: Give specialists rating
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the cases by level
          schema:
            items:
              $ref: '#/definitions/models.RatingSpecialistFul'
            type: array
        "400":
          description: Invalid input data or bad query parameter
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is invalid or expired
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "403":
          description: User is unverified
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      tags:
      - specialists
  /specialist/me:
    get:
      consumes:
      - application/json
      description: Retrieves information about the current specialist based on their
        user ID.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the specialist info
          schema:
            $ref: '#/definitions/models.Specialist'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is invalid or expired
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      tags:
      - specialists
  /specialist/update:
    put:
      consumes:
      - multipart/form-data
      description: |-
        Updates an existing specialist's information including their password, full name, and photo.
        The password must be more than 8 symbols and contain at least one number, one uppercase, and one lowercase letter.
        The photo upload is optional but must be a valid image file if provided.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: authorization
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        type: string
      - description: Full Name
        in: formData
        name: fullname
        type: string
      - description: Photo Upload
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "204":
          description: Successful update, no content returned
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "401":
          description: JWT is invalid or expired
          schema:
            $ref: '#/definitions/responses.MessageResponse'
        "500":
          description: Internal server error, could not process the request
          schema:
            $ref: '#/definitions/responses.MessageResponse'
      summary: UpdateMain Specialist Information with Photo Upload
      tags:
      - specialists
swagger: "2.0"
